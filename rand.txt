10 rem Daniel Gergov
20 rem 3/4/25
30 rem The following code collects n random samples from 0 to cs.
40 rem The code then generates a histogram of the sample as well as
50 rem providing statistics on the histogram bins such as standard deviation
60 rem mean, min, max, and time taken to generate the histogram.
70 rem The code scales the height of the histogram to rc and prints it
80 rem to the screen.

100 rem /================== SUBROUTINE MAP ==================/
105 rem /----------------------------------------------------/
110 rem /-- LINE --/-------------- DESCRIPTION --------------/
115 rem /   10000  /         random number generator         /
120 rem /   10100  /             print statistics            /
125 rem /   10200  /            compute statistics           /
130 rem /   10300  /            compute time taken           /
135 rem /   10400  /        compute standard deviation       /
140 rem /   10500  /       generate the histogram bins       /
145 rem /   10600  /    generate the histogram w/ scaling    /
150 rem /   10700  /           print the histogram           /
155 rem /   10800  /              set the seed               /
160 rem /----------------------------------------------------/

200 rc = 20 : cs = 10 : sm$ = "#"             : rem hist rows, columns, symbol
210 n = 100                                   : rem # of samples for analysis
220 lo = 0                                    : rem set the low to 0
230 dim ht$(rc, cs) : dim bi(cs) : dim da(n)  : rem alloc arrays for the code
240 bt = ti                                   : rem start time

300 gosub 10000 : rem generate array of numbers
310 gosub 10500 : rem generate bins
320 gosub 10200 : rem compute statsitics
330 gosub 10600 : rem generate the histogram
340 gosub 10700 : rem print the histogram
350 gosub 10100 : rem print the statistics

400 end

10000 rem generate the array of random numbers
10010 print "collecting a random sample of "; n; " from "; lo; " to "; cs
10020 rl = 0 : rh = cs : rem set the random low and high
10030 for i = 1 to n
10040   gosub 10800 : rem set the seed
10050   ra = (rh - rl) * rnd(sd) + rl : rem gen the random number
10060   da(i) = ra : rem put the number in an array
10070 next i
10080 return

10100 rem print the statistics of the histogram
10110 gosub 10300
10120 print "mean="; mn; " sigma="; si; " min="; mi; " max="; ma
10130 print "time taken="; tt; " seconds"
10140 return

10200 rem compute the statistics
10210 mi = n : ma = 0 : su = 0 : rem define min, max, and sum
10220 for i = 0 to (cs - 1)
10230   if bi(i) < mi then mi = bi(i)
10240   if bi(i) > ma then ma = bi(i)
10250   su = su + bi(i)
10260 next i
10270 mn = sum / cs : rem compute mean
10280 gosub 10400
10290 return

10300 rem compute time taken
10310 tt = (ti - bt) / 60 : rem compute time taken in seconds
10320 return

10400 rem compute stdev
10410 sq = 0 : rem sum squared
10420 for i = 0 to (cs - 1)
10430   sq = sq + (bi(i) - mn) ^ 2
10440 next i
10450 si = sqr(sq / (cs - 1)) : rem compute sigma
10460 return

10500 rem generate bins
10510 for i = 1 to n
10520   bi(int(da(i))) = bi(int(da(i))) + 1 : rem bi stores every bin
10530 next i
10540 return

10600 rem generate the histogram with scaling
10610 for c = 0 to (cs - 1)
10620   bi(c) = bi(c) * rc / ma : rem scale the histogram data
10630   for r = 1 to rc
10640     if r >= rc - bi(c) then ht$(r, c + 1) = sm$ : rem place sm$ if in bin
10650     if r < rc - bi(c) then ht$(r, c + 1) = " " : rem place ' ' if not
10660   next r
10670 next c
10680 return

10700 rem print the histogram
10710 for r = 1 to rc
10720   for c = 1 to cs
10730     print ht$(r, c);
10740   next c
10750   print
10760 next r
10770 return

10800 rem set the seed
10810 sd = ti
10820 return
